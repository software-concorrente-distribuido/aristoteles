/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
export const batch = (target, batchSize, offset = 0) => {
    return target.reduce((res, item, index) => {
        const chunkIndex = Math.floor((index + offset) / batchSize);
        if (!res[chunkIndex]) {
            res[chunkIndex] = [];
        }
        res[chunkIndex].push(item);
        return res;
    }, []);
};
/**
 * returns array with numbers from first argument to bound.
 * */
export const rangeFromTo = (from, to = 0, producer = i => i) => {
    const arr = [];
    for (let i = from; i < to; i++) {
        arr.push(producer(i));
    }
    return arr;
};
/**
 * returns array with numbers from zero to bound.
 * */
export const range = (bound, producer = i => i) => {
    return rangeFromTo(0, bound, producer);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGVscGVycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9mcmFtZXdvcmsvdGhlbWUvY29tcG9uZW50cy9jYWxlbmRhci1raXQvaGVscGVycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7OztHQUlHO0FBRUgsTUFBTSxDQUFDLE1BQU0sS0FBSyxHQUFHLENBQUksTUFBVyxFQUFFLFNBQWlCLEVBQUUsU0FBaUIsQ0FBQyxFQUFTLEVBQUU7SUFDcEYsT0FBTyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsRUFBRTtRQUN4QyxNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsS0FBSyxHQUFHLE1BQU0sQ0FBQyxHQUFHLFNBQVMsQ0FBQyxDQUFDO1FBQzVELElBQUksQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQztZQUNyQixHQUFHLENBQUMsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQ3ZCLENBQUM7UUFDRCxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzNCLE9BQU8sR0FBRyxDQUFDO0lBQ2IsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFBO0FBQ1IsQ0FBQyxDQUFDO0FBQ0Y7O0tBRUs7QUFDTCxNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsQ0FBSSxJQUFZLEVBQUUsRUFBRSxHQUFHLENBQUMsRUFBRSxXQUEwQixDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFO0lBQ3ZGLE1BQU0sR0FBRyxHQUFHLEVBQUUsQ0FBQztJQUVmLEtBQUssSUFBSSxDQUFDLEdBQUcsSUFBSSxFQUFFLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztRQUMvQixHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3hCLENBQUM7SUFFRCxPQUFPLEdBQUcsQ0FBQztBQUNiLENBQUMsQ0FBQztBQUVGOztLQUVLO0FBQ0wsTUFBTSxDQUFDLE1BQU0sS0FBSyxHQUFHLENBQUksS0FBYSxFQUFFLFdBQTBCLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUU7SUFDMUUsT0FBTyxXQUFXLENBQUMsQ0FBQyxFQUFFLEtBQUssRUFBRSxRQUFRLENBQUMsQ0FBQztBQUN6QyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgQWt2ZW8uIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuICovXG5cbmV4cG9ydCBjb25zdCBiYXRjaCA9IDxUPih0YXJnZXQ6IFRbXSwgYmF0Y2hTaXplOiBudW1iZXIsIG9mZnNldDogbnVtYmVyID0gMCk6IFRbXVtdID0+IHtcbiAgcmV0dXJuIHRhcmdldC5yZWR1Y2UoKHJlcywgaXRlbSwgaW5kZXgpID0+IHtcbiAgICBjb25zdCBjaHVua0luZGV4ID0gTWF0aC5mbG9vcigoaW5kZXggKyBvZmZzZXQpIC8gYmF0Y2hTaXplKTtcbiAgICBpZiAoIXJlc1tjaHVua0luZGV4XSkge1xuICAgICAgcmVzW2NodW5rSW5kZXhdID0gW107XG4gICAgfVxuICAgIHJlc1tjaHVua0luZGV4XS5wdXNoKGl0ZW0pO1xuICAgIHJldHVybiByZXM7XG4gIH0sIFtdKVxufTtcbi8qKlxuICogcmV0dXJucyBhcnJheSB3aXRoIG51bWJlcnMgZnJvbSBmaXJzdCBhcmd1bWVudCB0byBib3VuZC5cbiAqICovXG5leHBvcnQgY29uc3QgcmFuZ2VGcm9tVG8gPSA8VD4oZnJvbTogbnVtYmVyLCB0byA9IDAsIHByb2R1Y2VyOiAobnVtYmVyKSA9PiBUID0gaSA9PiBpKSA9PiB7XG4gIGNvbnN0IGFyciA9IFtdO1xuXG4gIGZvciAobGV0IGkgPSBmcm9tOyBpIDwgdG87IGkrKykge1xuICAgIGFyci5wdXNoKHByb2R1Y2VyKGkpKTtcbiAgfVxuXG4gIHJldHVybiBhcnI7XG59O1xuXG4vKipcbiAqIHJldHVybnMgYXJyYXkgd2l0aCBudW1iZXJzIGZyb20gemVybyB0byBib3VuZC5cbiAqICovXG5leHBvcnQgY29uc3QgcmFuZ2UgPSA8VD4oYm91bmQ6IG51bWJlciwgcHJvZHVjZXI6IChudW1iZXIpID0+IFQgPSBpID0+IGkpID0+IHtcbiAgcmV0dXJuIHJhbmdlRnJvbVRvKDAsIGJvdW5kLCBwcm9kdWNlcik7XG59O1xuIl19