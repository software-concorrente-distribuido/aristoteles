import { Inject, Injectable } from '@angular/core';
import { GlobalPositionStrategy } from '@angular/cdk/overlay';
import { map } from 'rxjs/operators';
import { NB_DOCUMENT } from '../../../theme.options';
import { NbFlexibleConnectedPositionStrategy, } from './mapping';
import { NbGlobalLogicalPosition } from './position-helper';
import { NbLayoutDirection } from '../../../services/direction.service';
import * as i0 from "@angular/core";
import * as i1 from "../adapter/viewport-ruler-adapter";
import * as i2 from "../platform/platform-service";
import * as i3 from "./mapping";
import * as i4 from "../adapter/overlay-container-adapter";
export var NbAdjustment;
(function (NbAdjustment) {
    NbAdjustment["NOOP"] = "noop";
    NbAdjustment["CLOCKWISE"] = "clockwise";
    NbAdjustment["COUNTERCLOCKWISE"] = "counterclockwise";
    NbAdjustment["VERTICAL"] = "vertical";
    NbAdjustment["HORIZONTAL"] = "horizontal";
})(NbAdjustment || (NbAdjustment = {}));
export var NbPosition;
(function (NbPosition) {
    NbPosition["TOP"] = "top";
    NbPosition["BOTTOM"] = "bottom";
    NbPosition["LEFT"] = "left";
    NbPosition["RIGHT"] = "right";
    NbPosition["START"] = "start";
    NbPosition["END"] = "end";
    NbPosition["TOP_END"] = "top-end";
    NbPosition["TOP_START"] = "top-start";
    NbPosition["BOTTOM_END"] = "bottom-end";
    NbPosition["BOTTOM_START"] = "bottom-start";
    NbPosition["END_TOP"] = "end-top";
    NbPosition["END_BOTTOM"] = "end-bottom";
    NbPosition["START_TOP"] = "start-top";
    NbPosition["START_BOTTOM"] = "start-bottom";
})(NbPosition || (NbPosition = {}));
const POSITIONS = {
    [NbPosition.RIGHT](offset) {
        return { originX: 'end', originY: 'center', overlayX: 'start', overlayY: 'center', offsetX: offset };
    },
    [NbPosition.BOTTOM](offset) {
        return { originX: 'center', originY: 'bottom', overlayX: 'center', overlayY: 'top', offsetY: offset };
    },
    [NbPosition.LEFT](offset) {
        return { originX: 'start', originY: 'center', overlayX: 'end', overlayY: 'center', offsetX: -offset };
    },
    [NbPosition.TOP](offset) {
        return { originX: 'center', originY: 'top', overlayX: 'center', overlayY: 'bottom', offsetY: -offset };
    },
    [NbPosition.START](offset) {
        return this[NbPosition.LEFT](offset);
    },
    [NbPosition.END](offset) {
        return this[NbPosition.RIGHT](offset);
    },
    [NbPosition.END_TOP](offset) {
        return { originX: 'end', originY: 'bottom', overlayX: 'start', overlayY: 'bottom', offsetX: offset };
    },
    [NbPosition.END_BOTTOM](offset) {
        return { originX: 'end', originY: 'top', overlayX: 'start', overlayY: 'top', offsetX: offset };
    },
    [NbPosition.BOTTOM_START](offset) {
        return { originX: 'end', originY: 'bottom', overlayX: 'end', overlayY: 'top', offsetY: offset };
    },
    [NbPosition.BOTTOM_END](offset) {
        return { originX: 'start', originY: 'bottom', overlayX: 'start', overlayY: 'top', offsetY: offset };
    },
    [NbPosition.START_TOP](offset) {
        return { originX: 'start', originY: 'bottom', overlayX: 'end', overlayY: 'bottom', offsetX: -offset };
    },
    [NbPosition.START_BOTTOM](offset) {
        return { originX: 'start', originY: 'top', overlayX: 'end', overlayY: 'top', offsetX: -offset };
    },
    [NbPosition.TOP_START](offset) {
        return { originX: 'end', originY: 'top', overlayX: 'end', overlayY: 'bottom', offsetY: -offset };
    },
    [NbPosition.TOP_END](offset) {
        return { originX: 'start', originY: 'top', overlayX: 'start', overlayY: 'bottom', offsetY: -offset };
    },
};
const RTL_PHYSICAL_POSITIONS = {
    ...POSITIONS,
    [NbPosition.RIGHT](offset) {
        return { originX: 'start', originY: 'center', overlayX: 'end', overlayY: 'center', offsetX: offset };
    },
    [NbPosition.LEFT](offset) {
        return { originX: 'end', originY: 'center', overlayX: 'start', overlayY: 'center', offsetX: -offset };
    },
    [NbPosition.START](offset) {
        return this[NbPosition.RIGHT](offset);
    },
    [NbPosition.END](offset) {
        return this[NbPosition.LEFT](offset);
    },
};
const COUNTER_CLOCKWISE_POSITIONS = [
    NbPosition.TOP,
    NbPosition.TOP_END,
    NbPosition.TOP_START,
    NbPosition.START,
    NbPosition.START_TOP,
    NbPosition.START_BOTTOM,
    NbPosition.BOTTOM,
    NbPosition.BOTTOM_START,
    NbPosition.BOTTOM_END,
    NbPosition.END,
    NbPosition.END_BOTTOM,
    NbPosition.END_TOP,
];
const CLOCKWISE_POSITIONS = [
    NbPosition.TOP,
    NbPosition.TOP_START,
    NbPosition.TOP_END,
    NbPosition.END,
    NbPosition.END_TOP,
    NbPosition.END_BOTTOM,
    NbPosition.BOTTOM,
    NbPosition.BOTTOM_END,
    NbPosition.BOTTOM_START,
    NbPosition.START,
    NbPosition.START_BOTTOM,
    NbPosition.START_TOP,
];
const VERTICAL_POSITIONS = [NbPosition.BOTTOM, NbPosition.TOP];
const HORIZONTAL_POSITIONS = [NbPosition.START, NbPosition.END];
function comparePositions(p1, p2) {
    return (p1.originX === p2.originX && p1.originY === p2.originY && p1.overlayX === p2.overlayX && p1.overlayY === p2.overlayY);
}
/**
 * The main idea of the adjustable connected strategy is to provide predefined set of positions for your overlay.
 * You have to provide adjustment and appropriate strategy will be chosen in runtime.
 * */
export class NbAdjustableConnectedPositionStrategy extends NbFlexibleConnectedPositionStrategy {
    constructor() {
        super(...arguments);
        this._offset = 15;
        this.positionChange = this.positionChanges.pipe(map((positionChange) => positionChange.connectionPair), map((connectionPair) => {
            return this.appliedPositions.find(({ connectedPosition }) => {
                return comparePositions(connectedPosition, connectionPair);
            }).key;
        }));
    }
    attach(overlayRef) {
        /**
         * We have to apply positions before attach because super.attach() validates positions and crashes app
         * if no positions provided.
         * */
        this.applyPositions();
        super.attach(overlayRef);
    }
    direction(direction) {
        this._direction = direction;
        return this;
    }
    apply() {
        this.applyPositions();
        super.apply();
    }
    position(position) {
        this._position = position;
        return this;
    }
    adjustment(adjustment) {
        this._adjustment = adjustment;
        return this;
    }
    offset(offset) {
        this._offset = offset;
        return this;
    }
    applyPositions() {
        const positions = this.createPositions();
        this.persistChosenPositions(positions);
        this.withPositions(this.appliedPositions.map(({ connectedPosition }) => connectedPosition));
    }
    createPositions() {
        switch (this._adjustment) {
            case NbAdjustment.NOOP:
                return [this._position];
            case NbAdjustment.CLOCKWISE:
                return this.reorderPreferredPositions(CLOCKWISE_POSITIONS);
            case NbAdjustment.COUNTERCLOCKWISE:
                return this.reorderPreferredPositions(COUNTER_CLOCKWISE_POSITIONS);
            case NbAdjustment.HORIZONTAL:
                return this.reorderPreferredPositions(HORIZONTAL_POSITIONS);
            case NbAdjustment.VERTICAL:
                return this.reorderPreferredPositions(VERTICAL_POSITIONS);
        }
    }
    mapToLogicalPosition(position) {
        if (position === NbPosition.LEFT) {
            return this._direction === NbLayoutDirection.LTR ? NbPosition.START : NbPosition.END;
        }
        if (position === NbPosition.RIGHT) {
            return this._direction === NbLayoutDirection.LTR ? NbPosition.END : NbPosition.START;
        }
        return position;
    }
    persistChosenPositions(positions) {
        const positionGrid = this._direction === NbLayoutDirection.RTL ? RTL_PHYSICAL_POSITIONS : POSITIONS;
        this.appliedPositions = positions.map((position) => ({
            key: position,
            connectedPosition: positionGrid[position](this._offset),
        }));
    }
    reorderPreferredPositions(positions) {
        // Physical positions should be mapped to logical as adjustments use logical positions.
        const startPosition = this.mapToLogicalPosition(this._position);
        const startPositionIndex = positions.indexOf(startPosition);
        const firstPart = positions.slice(startPositionIndex);
        const secondPart = positions.slice(0, startPositionIndex);
        return firstPart.concat(secondPart);
    }
}
export class NbGlobalPositionStrategy extends GlobalPositionStrategy {
    position(position) {
        switch (position) {
            case NbGlobalLogicalPosition.TOP_START:
                return this.top().left();
            case NbGlobalLogicalPosition.TOP_END:
                return this.top().right();
            case NbGlobalLogicalPosition.BOTTOM_START:
                return this.bottom().left();
            case NbGlobalLogicalPosition.BOTTOM_END:
                return this.bottom().right();
        }
    }
}
export class NbPositionBuilderService {
    constructor(document, viewportRuler, platform, positionBuilder, overlayContainer) {
        this.document = document;
        this.viewportRuler = viewportRuler;
        this.platform = platform;
        this.positionBuilder = positionBuilder;
        this.overlayContainer = overlayContainer;
    }
    global() {
        return new NbGlobalPositionStrategy();
    }
    connectedTo(elementRef) {
        return new NbAdjustableConnectedPositionStrategy(elementRef, this.viewportRuler, this.document, this.platform, this.overlayContainer)
            .withFlexibleDimensions(false)
            .withPush(false);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.1.0", ngImport: i0, type: NbPositionBuilderService, deps: [{ token: NB_DOCUMENT }, { token: i1.NbViewportRulerAdapter }, { token: i2.NbPlatform }, { token: i3.NbOverlayPositionBuilder }, { token: i4.NbOverlayContainerAdapter }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.1.0", ngImport: i0, type: NbPositionBuilderService }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.1.0", ngImport: i0, type: NbPositionBuilderService, decorators: [{
            type: Injectable
        }], ctorParameters: () => [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [NB_DOCUMENT]
                }] }, { type: i1.NbViewportRulerAdapter }, { type: i2.NbPlatform }, { type: i3.NbOverlayPositionBuilder }, { type: i4.NbOverlayContainerAdapter }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3ZlcmxheS1wb3NpdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9mcmFtZXdvcmsvdGhlbWUvY29tcG9uZW50cy9jZGsvb3ZlcmxheS9vdmVybGF5LXBvc2l0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBYyxNQUFNLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQy9ELE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBRTlELE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUdyQyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDckQsT0FBTyxFQUlMLG1DQUFtQyxHQUlwQyxNQUFNLFdBQVcsQ0FBQztBQUluQixPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUM1RCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxxQ0FBcUMsQ0FBQzs7Ozs7O0FBR3hFLE1BQU0sQ0FBTixJQUFZLFlBTVg7QUFORCxXQUFZLFlBQVk7SUFDdEIsNkJBQWEsQ0FBQTtJQUNiLHVDQUF1QixDQUFBO0lBQ3ZCLHFEQUFxQyxDQUFBO0lBQ3JDLHFDQUFxQixDQUFBO0lBQ3JCLHlDQUF5QixDQUFBO0FBQzNCLENBQUMsRUFOVyxZQUFZLEtBQVosWUFBWSxRQU12QjtBQWlCRCxNQUFNLENBQU4sSUFBWSxVQWVYO0FBZkQsV0FBWSxVQUFVO0lBQ3BCLHlCQUFXLENBQUE7SUFDWCwrQkFBaUIsQ0FBQTtJQUNqQiwyQkFBYSxDQUFBO0lBQ2IsNkJBQWUsQ0FBQTtJQUNmLDZCQUFlLENBQUE7SUFDZix5QkFBVyxDQUFBO0lBQ1gsaUNBQW1CLENBQUE7SUFDbkIscUNBQXVCLENBQUE7SUFDdkIsdUNBQXlCLENBQUE7SUFDekIsMkNBQTZCLENBQUE7SUFDN0IsaUNBQW1CLENBQUE7SUFDbkIsdUNB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ekMsZ0JBQTJDO1FBSnRCLGFBQVEsR0FBUixRQUFRLENBQUE7UUFDN0Isa0JBQWEsR0FBYixhQUFhLENBQXdCO1FBQ3JDLGFBQVEsR0FBUixRQUFRLENBQVk7UUFDcEIsb0JBQWUsR0FBZixlQUFlLENBQTBCO1FBQ3pDLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBMkI7SUFDcEQsQ0FBQztJQUVKLE1BQU07UUFDSixPQUFPLElBQUksd0JBQXdCLEVBQUUsQ0FBQztJQUN4QyxDQUFDO0lBRUQsV0FBVyxDQUFDLFVBQXNCO1FBQ2hDLE9BQU8sSUFBSSxxQ0FBcUMsQ0FDOUMsVUFBVSxFQUNWLElBQUksQ0FBQyxhQUFhLEVBQ2xCLElBQUksQ0FBQyxRQUFRLEVBQ2IsSUFBSSxDQUFDLFFBQVEsRUFDYixJQUFJLENBQUMsZ0JBQWdCLENBQ3RCO2FBQ0Usc0JBQXNCLENBQUMsS0FBSyxDQUFDO2FBQzdCLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixDQUFDOzhHQXZCVSx3QkFBd0Isa0JBRXpCLFdBQVc7a0hBRlYsd0JBQXdCOzsyRkFBeEIsd0JBQXdCO2tCQURwQyxVQUFVOzswQkFHTixNQUFNOzJCQUFDLFdBQVciLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFbGVtZW50UmVmLCBJbmplY3QsIEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEdsb2JhbFBvc2l0aW9uU3RyYXRlZ3kgfSBmcm9tICdAYW5ndWxhci9jZGsvb3ZlcmxheSc7XG5cbmltcG9ydCB7IG1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcblxuaW1wb3J0IHsgTkJfRE9DVU1FTlQgfSBmcm9tICcuLi8uLi8uLi90aGVtZS5vcHRpb25zJztcbmltcG9ydCB7XG4gIE5iQ29ubmVjdGVkT3ZlcmxheVBvc2l0aW9uQ2hhbmdlLFxuICBOYkNvbm5lY3RlZFBvc2l0aW9uLFxuICBOYkNvbm5lY3Rpb25Qb3NpdGlvblBhaXIsXG4gIE5iRmxleGlibGVDb25uZWN0ZWRQb3NpdGlvblN0cmF0ZWd5LFxuICBOYk92ZXJsYXlQb3NpdGlvbkJ1aWxkZXIsXG4gIE5iT3ZlcmxheVJlZixcbiAgTmJQb3NpdGlvblN0cmF0ZWd5LFxufSBmcm9tICcuL21hcHBpbmcnO1xuaW1wb3J0IHsgTmJQbGF0Zm9ybSB9IGZyb20gJy4uL3BsYXRmb3JtL3BsYXRmb3JtLXNlcnZpY2UnO1xuaW1wb3J0IHsgTmJPdmVybGF5Q29udGFpbmVyQWRhcHRlciB9IGZyb20gJy4uL2FkYXB0ZXIvb3ZlcmxheS1jb250YWluZXItYWRhcHRlcic7XG5pbXBvcnQgeyBOYlZpZXdwb3J0UnVsZXJBZGFwdGVyIH0gZnJvbSAnLi4vYWRhcHRlci92aWV3cG9ydC1ydWxlci1hZGFwdGVyJztcbmltcG9ydCB7IE5iR2xvYmFsTG9naWNhbFBvc2l0aW9uIH0gZnJvbSAnLi9wb3NpdGlvbi1oZWxwZXInO1xuaW1wb3J0IHsgTmJMYXlvdXREaXJlY3Rpb24gfSBmcm9tICcuLi8uLi8uLi9zZXJ2aWNlcy9kaXJlY3Rpb24uc2VydmljZSc7XG5cbmV4cG9ydCB0eXBlIE5iQWRqdXN0bWVudFZhbHVlcyA9ICdub29wJyB8ICdjbG9ja3dpc2UnIHwgJ2NvdW50ZXJjbG9ja3dpc2UnIHwgJ3ZlcnRpY2FsJyB8ICdob3Jpem9udGFsJztcbmV4cG9ydCBlbnVtIE5iQWRqdXN0bWVudCB7XG4gIE5PT1AgPSAnbm9vcCcsXG4gIENMT0NLV0lTRSA9ICdjbG9ja3dpc2UnLFxuICBDT1VOVEVSQ0xPQ0tXSVNFID0gJ2NvdW50ZXJjbG9ja3dpc2UnLFxuICBWRVJUSUNBTCA9ICd2ZXJ0aWNhbCcsXG4gIEhPUklaT05UQUwgPSAnaG9yaXpvbnRhbCcsXG59XG5cbmV4cG9ydCB0eXBlIE5iUG9zaXRpb25WYWx1ZXMgPVxuICB8ICd0b3AnXG4gIHwgJ2JvdHRvbSdcbiAgfCAnbGVmdCdcbiAgfCAncmlnaHQnXG4gIHwgJ3N0YXJ0J1xuICB8ICdlbmQnXG4gIHwgJ3RvcC1lbmQnXG4gIHwgJ3RvcC1zdGFydCdcbiAgfCAnYm90dG9tLWVuZCdcbiAgfCAnYm90dG9tLXN0YXJ0J1xuICB8ICdlbmQtdG9wJ1xuICB8ICdlbmQtYm90dG9tJ1xuICB8ICdzdGFydC10b3AnXG4gIHwgJ3N0YXJ0LWJvdHRvbSc7XG5leHBvcnQgZW51bSBOYlBvc2l0aW9uIHtcbiAgVE9QID0gJ3RvcCcsXG4gIEJPVFRPTSA9ICdib3R0b20nLFxuICBMRUZUID0gJ2xlZnQnLFxuICBSSUdIVCA9ICdyaWdodCcsXG4gIFNUQVJUID0gJ3N0YXJ0JyxcbiAgRU5EID0gJ2VuZCcsXG4gIFRPUF9FTkQgPSAndG9wLWVuZCcsXG4gIFRPUF9TVEFSVCA9ICd0b3Atc3RhcnQnLFxuICBCT1RUT01fRU5EID0gJ2JvdHRvbS1lbmQnLFxuICBCT1RUT01fU1RBUlQgPSAnYm90dG9tLXN0YXJ0JyxcbiAgRU5EX1RPUCA9ICdlbmQtdG9wJyxcbiAgRU5EX0JPVFRPTSA9ICdlbmQtYm90dG9tJyxcbiAgU1RBUlRfVE9QID0gJ3N0YXJ0LXRvcCcsXG4gIFNUQVJUX0JPVFRPTSA9ICdzdGFydC1ib3R0b20nLFxufVxuXG5jb25zdCBQT1NJVElPTlMgPSB7XG4gIFtOYlBvc2l0aW9uLlJJR0hUXShvZmZzZXQpIHtcbiAgICByZXR1cm4geyBvcmlnaW5YOiAnZW5kJywgb3JpZ2luWTogJ2NlbnRlcicsIG92ZXJsYXlYOiAnc3RhcnQnLCBvdmVybGF5WTogJ2NlbnRlcicsIG9mZnNldFg6IG9mZnNldCB9O1xuICB9LFxuICBbTmJQb3NpdGlvbi5CT1RUT01dKG9mZnNldCkge1xuICAgIHJldHVybiB7IG9yaWdpblg6ICdjZW50ZXInLCBvcmlnaW5ZOiAnYm90dG9tJywgb3ZlcmxheVg6ICdjZW50ZXInLCBvdmVybGF5WTogJ3RvcCcsIG9mZnNldFk6IG9mZnNldCB9O1xuICB9LFxuICBbTmJQb3NpdGlvbi5MRUZUXShvZmZzZXQpIHtcbiAgICByZXR1cm4geyBvcmlnaW5YOiAnc3RhcnQnLCBvcmlnaW5ZOiAnY2VudGVyJywgb3ZlcmxheVg6ICdlbmQnLCBvdmVybGF5WTogJ2NlbnRlcicsIG9mZnNldFg6IC1vZmZzZXQgfTtcbiAgfSxcbiAgW05iUG9zaXRpb24uVE9QXShvZmZzZXQpIHtcbiAgICByZXR1cm4geyBvcmlnaW5YOiAnY2VudGVyJywgb3JpZ2luWTogJ3RvcCcsIG92ZXJsYXlYOiAnY2VudGVyJywgb3ZlcmxheVk6ICdib3R0b20nLCBvZmZzZXRZOiAtb2Zmc2V0IH07XG4gIH0sXG4gIFtOYlBvc2l0aW9uLlNUQVJUXShvZmZzZXQpIHtcbiAgICByZXR1cm4gdGhpc1tOYlBvc2l0aW9uLkxFRlRdKG9mZnNldCk7XG4gIH0sXG4gIFtOYlBvc2l0aW9uLkVORF0ob2Zmc2V0KSB7XG4gICAgcmV0dXJuIHRoaXNbTmJQb3NpdGlvbi5SSUdIVF0ob2Zmc2V0KTtcbiAgfSxcbiAgW05iUG9zaXRpb24uRU5EX1RPUF0ob2Zmc2V0KSB7XG4gICAgcmV0dXJuIHsgb3JpZ2luWDogJ2VuZCcsIG9yaWdpblk6ICdib3R0b20nLCBvdmVybGF5WDogJ3N0YXJ0Jywgb3ZlcmxheVk6ICdib3R0b20nLCBvZmZzZXRYOiBvZmZzZXQgfTtcbiAgfSxcbiAgW05iUG9zaXRpb24uRU5EX0JPVFRPTV0ob2Zmc2V0KSB7XG4gICAgcmV0dXJuIHsgb3JpZ2luWDogJ2VuZCcsIG9yaWdpblk6ICd0b3AnLCBvdmVybGF5WDogJ3N0YXJ0Jywgb3ZlcmxheVk6ICd0b3AnLCBvZmZzZXRYOiBvZmZzZXQgfTtcbiAgfSxcbiAgW05iUG9zaXRpb24uQk9UVE9NX1NUQVJUXShvZmZzZXQpIHtcbiAgICByZXR1cm4geyBvcmlnaW5YOiAnZW5kJywgb3JpZ2luWTogJ2JvdHRvbScsIG92ZXJsYXlYOiAnZW5kJywgb3ZlcmxheVk6ICd0b3AnLCBvZmZzZXRZOiBvZmZzZXQgfTtcbiAgfSxcbiAgW05iUG9zaXRpb24uQk9UVE9NX0VORF0ob2Zmc2V0KSB7XG4gICAgcmV0dXJuIHsgb3JpZ2luWDogJ3N0YXJ0Jywgb3JpZ2luWTogJ2JvdHRvbScsIG92ZXJsYXlYOiAnc3RhcnQnLCBvdmVybGF5WTogJ3RvcCcsIG9mZnNldFk6IG9mZnNldCB9O1xuICB9LFxuICBbTmJQb3NpdGlvbi5TVEFSVF9UT1BdKG9mZnNldCkge1xuICAgIHJldHVybiB7IG9yaWdpblg6ICdzdGFydCcsIG9yaWdpblk6ICdib3R0b20nLCBvdmVybGF5WDogJ2VuZCcsIG92ZXJsYXlZOiAnYm90dG9tJywgb2Zmc2V0WDogLW9mZnNldCB9O1xuICB9LFxuICBbTmJQb3NpdGlvbi5TVEFSVF9CT1RUT01dKG9mZnNldCkge1xuICAgIHJldHVybiB7IG9yaWdpblg6ICdzdGFydCcsIG9yaWdpblk6ICd0b3AnLCBvdmVybGF5WDogJ2VuZCcsIG92ZXJsYXlZOiAndG9wJywgb2Zmc2V0WDogLW9mZnNldCB9O1xuICB9LFxuICBbTmJQb3NpdGlvbi5UT1BfU1RBUlRdKG9mZnNldCkge1xuICAgIHJldHVybiB7IG9yaWdpblg6ICdlbmQnLCBvcmlnaW5ZOiAndG9wJywgb3ZlcmxheVg6ICdlbmQnLCBvdmVybGF5WTogJ2JvdHRvbScsIG9mZnNldFk6IC1vZmZzZXQgfTtcbiAgfSxcbiAgW05iUG9zaXRpb24uVE9QX0VORF0ob2Zmc2V0KSB7XG4gICAgcmV0dXJuIHsgb3JpZ2luWDogJ3N0YXJ0Jywgb3JpZ2luWTogJ3RvcCcsIG92ZXJsYXlYOiAnc3RhcnQnLCBvdmVybGF5WTogJ2JvdHRvbScsIG9mZnNldFk6IC1vZmZzZXQgfTtcbiAgfSxcbn07XG5cbmNvbnN0IFJUTF9QSFlTSUNBTF9QT1NJVElPTlMgPSB7XG4gIC4uLlBPU0lUSU9OUyxcbiAgW05iUG9zaXRpb24uUklHSFRdKG9mZnNldCkge1xuICAgIHJldHVybiB7IG9yaWdpblg6ICdzdGFydCcsIG9yaWdpblk6ICdjZW50ZXInLCBvdmVybGF5WDogJ2VuZCcsIG92ZXJsYXlZOiAnY2VudGVyJywgb2Zmc2V0WDogb2Zmc2V0IH07XG4gIH0sXG4gIFtOYlBvc2l0aW9uLkxFRlRdKG9mZnNldCkge1xuICAgIHJldHVybiB7IG9yaWdpblg6ICdlbmQnLCBvcmlnaW5ZOiAnY2VudGVyJywgb3ZlcmxheVg6ICdzdGFydCcsIG92ZXJsYXlZOiAnY2VudGVyJywgb2Zmc2V0WDogLW9mZnNldCB9O1xuICB9LFxuICBbTmJQb3NpdGlvbi5TVEFSVF0ob2Zmc2V0KSB7XG4gICAgcmV0dXJuIHRoaXNbTmJQb3NpdGlvbi5SSUdIVF0ob2Zmc2V0KTtcbiAgfSxcbiAgW05iUG9zaXRpb24uRU5EXShvZmZzZXQpIHtcbiAgICByZXR1cm4gdGhpc1tOYlBvc2l0aW9uLkxFRlRdKG9mZnNldCk7XG4gIH0sXG59O1xuXG5jb25zdCBDT1VOVEVSX0NMT0NLV0lTRV9QT1NJVElPTlMgPSBbXG4gIE5iUG9zaXRpb24uVE9QLFxuICBOYlBvc2l0aW9uLlRPUF9FTkQsXG4gIE5iUG9zaXRpb24uVE9QX1NUQVJULFxuICBOYlBvc2l0aW9uLlNUQVJULFxuICBOYlBvc2l0aW9uLlNUQVJUX1RPUCxcbiAgTmJQb3NpdGlvbi5TVEFSVF9CT1RUT00sXG4gIE5iUG9zaXRpb24uQk9UVE9NLFxuICBOYlBvc2l0aW9uLkJPVFRPTV9TVEFSVCxcbiAgTmJQb3NpdGlvbi5CT1RUT01fRU5ELFxuICBOYlBvc2l0aW9uLkVORCxcbiAgTmJQb3NpdGlvbi5FTkRfQk9UVE9NLFxuICBOYlBvc2l0aW9uLkVORF9UT1AsXG5dO1xuY29uc3QgQ0xPQ0tXSVNFX1BPU0lUSU9OUyA9IFtcbiAgTmJQb3NpdGlvbi5UT1AsXG4gIE5iUG9zaXRpb24uVE9QX1NUQVJULFxuICBOYlBvc2l0aW9uLlRPUF9FTkQsXG4gIE5iUG9zaXRpb24uRU5ELFxuICBOYlBvc2l0aW9uLkVORF9UT1AsXG4gIE5iUG9zaXRpb24uRU5EX0JPVFRPTSxcbiAgTmJQb3NpdGlvbi5CT1RUT00sXG4gIE5iUG9zaXRpb24uQk9UVE9NX0VORCxcbiAgTmJQb3NpdGlvbi5CT1RUT01fU1RBUlQsXG4gIE5iUG9zaXRpb24uU1RBUlQsXG4gIE5iUG9zaXRpb24uU1RBUlRfQk9UVE9NLFxuICBOYlBvc2l0aW9uLlNUQVJUX1RPUCxcbl07XG5jb25zdCBWRVJUSUNBTF9QT1NJVElPTlMgPSBbTmJQb3NpdGlvbi5CT1RUT00sIE5iUG9zaXRpb24uVE9QXTtcbmNvbnN0IEhPUklaT05UQUxfUE9TSVRJT05TID0gW05iUG9zaXRpb24uU1RBUlQsIE5iUG9zaXRpb24uRU5EXTtcblxuZnVuY3Rpb24gY29tcGFyZVBvc2l0aW9ucyhwMTogTmJDb25uZWN0ZWRQb3NpdGlvbiwgcDI6IE5iQ29ubmVjdGVkUG9zaXRpb24pOiBib29sZWFuIHtcbiAgcmV0dXJuIChcbiAgICBwMS5vcmlnaW5YID09PSBwMi5vcmlnaW5YICYmIHAxLm9yaWdpblkgPT09IHAyLm9yaWdpblkgJiYgcDEub3ZlcmxheVggPT09IHAyLm92ZXJsYXlYICYmIHAxLm92ZXJsYXlZID09PSBwMi5vdmVybGF5WVxuICApO1xufVxuXG4vKipcbiAqIFRoZSBtYWluIGlkZWEgb2YgdGhlIGFkanVzdGFibGUgY29ubmVjdGVkIHN0cmF0ZWd5IGlzIHRvIHByb3ZpZGUgcHJlZGVmaW5lZCBzZXQgb2YgcG9zaXRpb25zIGZvciB5b3VyIG92ZXJsYXkuXG4gKiBZb3UgaGF2ZSB0byBwcm92aWRlIGFkanVzdG1lbnQgYW5kIGFwcHJvcHJpYXRlIHN0cmF0ZWd5IHdpbGwgYmUgY2hvc2VuIGluIHJ1bnRpbWUuXG4gKiAqL1xuZXhwb3J0IGNsYXNzIE5iQWRqdXN0YWJsZUNvbm5lY3RlZFBvc2l0aW9uU3RyYXRlZ3lcbiAgZXh0ZW5kcyBOYkZsZXhpYmxlQ29ubmVjdGVkUG9zaXRpb25TdHJhdGVneVxuICBpbXBsZW1lbnRzIE5iUG9zaXRpb25TdHJhdGVneVxue1xuICBwcm90ZWN0ZWQgX3Bvc2l0aW9uOiBOYlBvc2l0aW9uO1xuICBwcm90ZWN0ZWQgX29mZnNldDogbnVtYmVyID0gMTU7XG4gIHByb3RlY3RlZCBfYWRqdXN0bWVudDogTmJBZGp1c3RtZW50O1xuICBwcm90ZWN0ZWQgX2RpcmVjdGlvbjogTmJMYXlvdXREaXJlY3Rpb24gfCB1bmRlZmluZWQ7XG5cbiAgcHJvdGVjdGVkIGFwcGxpZWRQb3NpdGlvbnM6IHsga2V5OiBOYlBvc2l0aW9uOyBjb25uZWN0ZWRQb3NpdGlvbjogTmJDb25uZWN0ZWRQb3NpdGlvbiB9W107XG5cbiAgcmVhZG9ubHkgcG9zaXRpb25DaGFuZ2U6IE9ic2VydmFibGU8TmJQb3NpdGlvbj4gPSB0aGlzLnBvc2l0aW9uQ2hhbmdlcy5waXBlKFxuICAgIG1hcCgocG9zaXRpb25DaGFuZ2U6IE5iQ29ubmVjdGVkT3ZlcmxheVBvc2l0aW9uQ2hhbmdlKSA9PiBwb3NpdGlvbkNoYW5nZS5jb25uZWN0aW9uUGFpciksXG4gICAgbWFwKChjb25uZWN0aW9uUGFpcjogTmJDb25uZWN0aW9uUG9zaXRpb25QYWlyKSA9PiB7XG4gICAgICByZXR1cm4gdGhpcy5hcHBsaWVkUG9zaXRpb25zLmZpbmQoKHsgY29ubmVjdGVkUG9zaXRpb24gfSkgPT4ge1xuICAgICAgICByZXR1cm4gY29tcGFyZVBvc2l0aW9ucyhjb25uZWN0ZWRQb3NpdGlvbiwgY29ubmVjdGlvblBhaXIpO1xuICAgICAgfSkua2V5O1xuICAgIH0pLFxuICApO1xuXG4gIGF0dGFjaChvdmVybGF5UmVmOiBOYk92ZXJsYXlSZWYpIHtcbiAgICAvKipcbiAgICAgKiBXZSBoYXZlIHRvIGFwcGx5IHBvc2l0aW9ucyBiZWZvcmUgYXR0YWNoIGJlY2F1c2Ugc3VwZXIuYXR0YWNoKCkgdmFsaWRhdGVzIHBvc2l0aW9ucyBhbmQgY3Jhc2hlcyBhcHBcbiAgICAgKiBpZiBubyBwb3NpdGlvbnMgcHJvdmlkZWQuXG4gICAgICogKi9cbiAgICB0aGlzLmFwcGx5UG9zaXRpb25zKCk7XG4gICAgc3VwZXIuYXR0YWNoKG92ZXJsYXlSZWYpO1xuICB9XG5cbiAgZGlyZWN0aW9uKGRpcmVjdGlvbjogTmJMYXlvdXREaXJlY3Rpb24pOiB0aGlzIHtcbiAgICB0aGlzLl9kaXJlY3Rpb24gPSBkaXJlY3Rpb247XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBhcHBseSgpIHtcbiAgICB0aGlzLmFwcGx5UG9zaXRpb25zKCk7XG4gICAgc3VwZXIuYXBwbHkoKTtcbiAgfVxuXG4gIHBvc2l0aW9uKHBvc2l0aW9uOiBOYlBvc2l0aW9uKTogdGhpcyB7XG4gICAgdGhpcy5fcG9zaXRpb24gPSBwb3NpdGlvbjtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGFkanVzdG1lbnQoYWRqdXN0bWVudDogTmJBZGp1c3RtZW50KTogdGhpcyB7XG4gICAgdGhpcy5fYWRqdXN0bWVudCA9IGFkanVzdG1lbnQ7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBvZmZzZXQob2Zmc2V0OiBudW1iZXIpOiB0aGlzIHtcbiAgICB0aGlzLl9vZmZzZXQgPSBvZmZzZXQ7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBwcm90ZWN0ZWQgYXBwbHlQb3NpdGlvbnMoKSB7XG4gICAgY29uc3QgcG9zaXRpb25zOiBOYlBvc2l0aW9uW10gPSB0aGlzLmNyZWF0ZVBvc2l0aW9ucygpO1xuICAgIHRoaXMucGVyc2lzdENob3NlblBvc2l0aW9ucyhwb3NpdGlvbnMpO1xuICAgIHRoaXMud2l0aFBvc2l0aW9ucyh0aGlzLmFwcGxpZWRQb3NpdGlvbnMubWFwKCh7IGNvbm5lY3RlZFBvc2l0aW9uIH0pID0+IGNvbm5lY3RlZFBvc2l0aW9uKSk7XG4gIH1cblxuICBwcm90ZWN0ZWQgY3JlYXRlUG9zaXRpb25zKCk6IE5iUG9zaXRpb25bXSB7XG4gICAgc3dpdGNoICh0aGlzLl9hZGp1c3RtZW50KSB7XG4gICAgICBjYXNlIE5iQWRqdXN0bWVudC5OT09QOlxuICAgICAgICByZXR1cm4gW3RoaXMuX3Bvc2l0aW9uXTtcbiAgICAgIGNhc2UgTmJBZGp1c3RtZW50LkNMT0NLV0lTRTpcbiAgICAgICAgcmV0dXJuIHRoaXMucmVvcmRlclByZWZlcnJlZFBvc2l0aW9ucyhDTE9DS1dJU0VfUE9TSVRJT05TKTtcbiAgICAgIGNhc2UgTmJBZGp1c3RtZW50LkNPVU5URVJDTE9DS1dJU0U6XG4gICAgICAgIHJldHVybiB0aGlzLnJlb3JkZXJQcmVmZXJyZWRQb3NpdGlvbnMoQ09VTlRFUl9DTE9DS1dJU0VfUE9TSVRJT05TKTtcbiAgICAgIGNhc2UgTmJBZGp1c3RtZW50LkhPUklaT05UQUw6XG4gICAgICAgIHJldHVybiB0aGlzLnJlb3JkZXJQcmVmZXJyZWRQb3NpdGlvbnMoSE9SSVpPTlRBTF9QT1NJVElPTlMpO1xuICAgICAgY2FzZSBOYkFkanVzdG1lbnQuVkVSVElDQUw6XG4gICAgICAgIHJldHVybiB0aGlzLnJlb3JkZXJQcmVmZXJyZWRQb3NpdGlvbnMoVkVSVElDQUxfUE9TSVRJT05TKTtcbiAgICB9XG4gIH1cblxuICBwcm90ZWN0ZWQgbWFwVG9Mb2dpY2FsUG9zaXRpb24ocG9zaXRpb246IE5iUG9zaXRpb24pOiBOYlBvc2l0aW9uIHtcbiAgICBpZiAocG9zaXRpb24gPT09IE5iUG9zaXRpb24uTEVGVCkge1xuICAgICAgcmV0dXJuIHRoaXMuX2RpcmVjdGlvbiA9PT0gTmJMYXlvdXREaXJlY3Rpb24uTFRSID8gTmJQb3NpdGlvbi5TVEFSVCA6IE5iUG9zaXRpb24uRU5EO1xuICAgIH1cbiAgICBpZiAocG9zaXRpb24gPT09IE5iUG9zaXRpb24uUklHSFQpIHtcbiAgICAgIHJldHVybiB0aGlzLl9kaXJlY3Rpb24gPT09IE5iTGF5b3V0RGlyZWN0aW9uLkxUUiA/IE5iUG9zaXRpb24uRU5EIDogTmJQb3NpdGlvbi5TVEFSVDtcbiAgICB9XG4gICAgcmV0dXJuIHBvc2l0aW9uO1xuICB9XG5cbiAgcHJvdGVjdGVkIHBlcnNpc3RDaG9zZW5Qb3NpdGlvbnMocG9zaXRpb25zOiBOYlBvc2l0aW9uW10pIHtcbiAgICBjb25zdCBwb3NpdGlvbkdyaWQgPSB0aGlzLl9kaXJlY3Rpb24gPT09IE5iTGF5b3V0RGlyZWN0aW9uLlJUTCA/IFJUTF9QSFlTSUNBTF9QT1NJVElPTlMgOiBQT1NJVElPTlM7XG5cbiAgICB0aGlzLmFwcGxpZWRQb3NpdGlvbnMgPSBwb3NpdGlvbnMubWFwKChwb3NpdGlvbikgPT4gKHtcbiAgICAgIGtleTogcG9zaXRpb24sXG4gICAgICBjb25uZWN0ZWRQb3NpdGlvbjogcG9zaXRpb25HcmlkW3Bvc2l0aW9uXSh0aGlzLl9vZmZzZXQpIGFzIE5iQ29ubmVjdGVkUG9zaXRpb24sXG4gICAgfSkpO1xuICB9XG5cbiAgcHJvdGVjdGVkIHJlb3JkZXJQcmVmZXJyZWRQb3NpdGlvbnMocG9zaXRpb25zOiBOYlBvc2l0aW9uW10pOiBOYlBvc2l0aW9uW10ge1xuICAgIC8vIFBoeXNpY2FsIHBvc2l0aW9ucyBzaG91bGQgYmUgbWFwcGVkIHRvIGxvZ2ljYWwgYXMgYWRqdXN0bWVudHMgdXNlIGxvZ2ljYWwgcG9zaXRpb25zLlxuICAgIGNvbnN0IHN0YXJ0UG9zaXRpb24gPSB0aGlzLm1hcFRvTG9naWNhbFBvc2l0aW9uKHRoaXMuX3Bvc2l0aW9uKTtcbiAgICBjb25zdCBzdGFydFBvc2l0aW9uSW5kZXggPSBwb3NpdGlvbnMuaW5kZXhPZihzdGFydFBvc2l0aW9uKTtcbiAgICBjb25zdCBmaXJzdFBhcnQgPSBwb3NpdGlvbnMuc2xpY2Uoc3RhcnRQb3NpdGlvbkluZGV4KTtcbiAgICBjb25zdCBzZWNvbmRQYXJ0ID0gcG9zaXRpb25zLnNsaWNlKDAsIHN0YXJ0UG9zaXRpb25JbmRleCk7XG4gICAgcmV0dXJuIGZpcnN0UGFydC5jb25jYXQoc2Vjb25kUGFydCk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIE5iR2xvYmFsUG9zaXRpb25TdHJhdGVneSBleHRlbmRzIEdsb2JhbFBvc2l0aW9uU3RyYXRlZ3kge1xuICBwb3NpdGlvbihwb3NpdGlvbjogTmJHbG9iYWxMb2dpY2FsUG9zaXRpb24pOiB0aGlzIHtcbiAgICBzd2l0Y2ggKHBvc2l0aW9uKSB7XG4gICAgICBjYXNlIE5iR2xvYmFsTG9naWNhbFBvc2l0aW9uLlRPUF9TVEFSVDpcbiAgICAgICAgcmV0dXJuIHRoaXMudG9wKCkubGVmdCgpO1xuXG4gICAgICBjYXNlIE5iR2xvYmFsTG9naWNhbFBvc2l0aW9uLlRPUF9FTkQ6XG4gICAgICAgIHJldHVybiB0aGlzLnRvcCgpLnJpZ2h0KCk7XG5cbiAgICAgIGNhc2UgTmJHbG9iYWxMb2dpY2FsUG9zaXRpb24uQk9UVE9NX1NUQVJUOlxuICAgICAgICByZXR1cm4gdGhpcy5ib3R0b20oKS5sZWZ0KCk7XG5cbiAgICAgIGNhc2UgTmJHbG9iYWxMb2dpY2FsUG9zaXRpb24uQk9UVE9NX0VORDpcbiAgICAgICAgcmV0dXJuIHRoaXMuYm90dG9tKCkucmlnaHQoKTtcbiAgICB9XG4gIH1cbn1cblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIE5iUG9zaXRpb25CdWlsZGVyU2VydmljZSB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIEBJbmplY3QoTkJfRE9DVU1FTlQpIHByb3RlY3RlZCBkb2N1bWVudCxcbiAgICBwcm90ZWN0ZWQgdmlld3BvcnRSdWxlcjogTmJWaWV3cG9ydFJ1bGVyQWRhcHRlcixcbiAgICBwcm90ZWN0ZWQgcGxhdGZvcm06IE5iUGxhdGZvcm0sXG4gICAgcHJvdGVjdGVkIHBvc2l0aW9uQnVpbGRlcjogTmJPdmVybGF5UG9zaXRpb25CdWlsZGVyLFxuICAgIHByb3RlY3RlZCBvdmVybGF5Q29udGFpbmVyOiBOYk92ZXJsYXlDb250YWluZXJBZGFwdGVyLFxuICApIHt9XG5cbiAgZ2xvYmFsKCk6IE5iR2xvYmFsUG9zaXRpb25TdHJhdGVneSB7XG4gICAgcmV0dXJuIG5ldyBOYkdsb2JhbFBvc2l0aW9uU3RyYXRlZ3koKTtcbiAgfVxuXG4gIGNvbm5lY3RlZFRvKGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYpOiBOYkFkanVzdGFibGVDb25uZWN0ZWRQb3NpdGlvblN0cmF0ZWd5IHtcbiAgICByZXR1cm4gbmV3IE5iQWRqdXN0YWJsZUNvbm5lY3RlZFBvc2l0aW9uU3RyYXRlZ3koXG4gICAgICBlbGVtZW50UmVmLFxuICAgICAgdGhpcy52aWV3cG9ydFJ1bGVyLFxuICAgICAgdGhpcy5kb2N1bWVudCxcbiAgICAgIHRoaXMucGxhdGZvcm0sXG4gICAgICB0aGlzLm92ZXJsYXlDb250YWluZXIsXG4gICAgKVxuICAgICAgLndpdGhGbGV4aWJsZURpbWVuc2lvbnMoZmFsc2UpXG4gICAgICAud2l0aFB1c2goZmFsc2UpO1xuICB9XG59XG4iXX0=